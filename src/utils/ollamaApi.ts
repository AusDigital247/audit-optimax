
import axios from 'axios';
import { supabase } from "@/integrations/supabase/client";

// Anyscale API configuration (fallback for local development only)
const ANYSCALE_API_URL = 'https://api.endpoints.anyscale.com/v1/chat/completions';
const MODEL = 'mistralai/Mixtral-8x7B-Instruct-v0.1';

// ADD YOUR DEFAULT API KEY HERE (ONLY FOR DEVELOPMENT/TESTING)
const DEFAULT_ANYSCALE_API_KEY = 'YOUR_DEFAULT_API_KEY_HERE';

export const generateOllamaResponse = async (prompt: string, systemPrompt?: string): Promise<string> => {
  try {
    console.log('Processing AI content request with prompt:', prompt);
    
    // First try to use the Supabase Edge Function
    try {
      const { data, error } = await supabase.functions.invoke('generate-ai-content', {
        body: { prompt, systemPrompt }
      });
      
      if (error) {
        console.warn('Supabase Edge Function error:', error);
        throw error;
      }
      
      if (data && data.content) {
        console.log('Received response from Supabase Edge Function');
        return data.content;
      }
    } catch (supabaseError) {
      console.warn('Failed to use Supabase Edge Function, falling back to client-side API call:', supabaseError);
      // Fall back to the client-side implementation
    }
    
    // For development and testing, if API is not available, use a fallback response
    if (process.env.NODE_ENV === 'development' && !process.env.ANYSCALE_API_KEY) {
      console.log('Using fallback response for development');
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      return `This is a fallback response for development purposes. In production, this would be generated by the Anyscale API using the prompt: "${prompt}"`;
    }
    
    // Get the API key from environment variables, local storage, or default
    const apiKey = 
      process.env.ANYSCALE_API_KEY || 
      localStorage.getItem('anyscaleApiKey') || 
      DEFAULT_ANYSCALE_API_KEY;
    
    if (!apiKey) {
      console.warn('No Anyscale API key found. Using fallback response.');
      return `To generate real content, please provide your Anyscale API key in the settings. This is a fallback response for: "${prompt}"`;
    }
    
    const response = await axios.post(ANYSCALE_API_URL, {
      model: MODEL,
      messages: [
        {
          role: "system",
          content: systemPrompt || "You are a helpful assistant that generates high-quality blog content and writing assistance."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: 2000,
    }, {
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('Received response from Anyscale API');
    return response.data.choices[0].message.content;
  } catch (error) {
    console.error('Error generating Anyscale response:', error);
    
    // Provide a graceful fallback for errors
    return "I'm sorry, I couldn't generate a response at this time. Please try again later or check your API key.";
  }
};

/**
 * Rewrites a paragraph using Anyscale API
 * @param text Original paragraph text
 * @param tone Desired tone for rewrite
 * @returns Rewritten paragraph
 */
export const rewriteParagraphWithOllama = async (text: string, tone: string): Promise<string> => {
  const prompt = `Rewrite the following paragraph in a ${tone} tone, maintaining its meaning but using different wording:\n\n"${text}"\n\nRewritten paragraph:`;
  const systemPrompt = "You are an expert content rewriter. Your task is to rewrite text while maintaining the original meaning but improving the quality, readability, and matching the requested tone.";
  return generateOllamaResponse(prompt, systemPrompt);
};

/**
 * Rewrites a sentence using Anyscale API
 * @param text Original sentence text
 * @param tone Desired tone for rewrite
 * @returns Rewritten sentence
 */
export const rewriteSentenceWithOllama = async (text: string, tone: string): Promise<string> => {
  const prompt = `Rewrite the following sentence in a ${tone} tone, maintaining its meaning but using different wording:\n\n"${text}"\n\nRewritten sentence:`;
  const systemPrompt = "You are an expert sentence rewriter. Your task is to rewrite sentences while maintaining the original meaning but improving the quality, readability, and matching the requested tone.";
  return generateOllamaResponse(prompt, systemPrompt);
};

/**
 * Generates blog ideas using Anyscale API
 * @param topic Blog topic
 * @param count Number of ideas to generate
 * @returns List of blog ideas
 */
export const generateBlogIdeasWithOllama = async (topic: string, count: number): Promise<string[]> => {
  const prompt = `Generate ${count} unique and engaging blog post ideas about "${topic}". For each idea, provide a compelling title.`;
  const systemPrompt = "You are a creative content strategist specializing in generating engaging blog post ideas that drive traffic and engagement.";
  const response = await generateOllamaResponse(prompt, systemPrompt);
  
  // Parse the response into a list of blog ideas
  const ideas = response
    .split(/\d+\./)
    .map(item => item.trim())
    .filter(item => item.length > 0);
  
  return ideas.length ? ideas : [`${count} Blog Ideas About ${topic}`];
};
