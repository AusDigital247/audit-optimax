import axios from 'axios';

// Anyscale API configuration
const ANYSCALE_API_URL = 'https://api.endpoints.anyscale.com/v1/chat/completions';
const MODEL = 'mistralai/Mixtral-8x7B-Instruct-v0.1';

// Hardcoded API key - Note: This approach is not recommended for production applications
// as it exposes your API key in the client-side code
const ANYSCALE_API_KEY = 'aph0_CkcwRQIhAI777tQ6BeGm85RmDSjQ_k_TmKHcQO7nelI5nY3zEv83AiAlEHv7MhxnArzlLgG1uUAqunnmJLrOGg1NRDgROaXsmBJjEiC6sb38cpYDGI399Rv9l8KTFeHTsj383DnZdzVPku4ncBgBIh51c3JfY2w3eDQ3Ymw2Y3RmZHA3enc3NjI3bXV1eG46DAi954GfEhDo5dGdAUIMCJGpob8GEOjl0Z0B8gEA';

export const generateOllamaResponse = async (prompt: string, systemPrompt?: string): Promise<string> => {
  try {
    console.log('Processing AI content request with prompt:', prompt);
    
    // Use the hardcoded API key directly
    if (!ANYSCALE_API_KEY) {
      console.warn('No Anyscale API key available.');
      return `Unable to generate content. API key not available. This is a fallback response for: "${prompt}"`;
    }
    
    // Disable fallback for production use
    const useFallback = false;
    if (useFallback) {
      console.log('Using fallback response for development');
      await new Promise(resolve => setTimeout(resolve, 1000));
      return `This is a fallback response for development purposes. In production, this would be generated by the Anyscale API using the prompt: "${prompt}"`;
    }
    
    try {
      const response = await axios.post(
        ANYSCALE_API_URL, 
        {
          model: MODEL,
          messages: [
            {
              role: "system",
              content: systemPrompt || "You are a helpful assistant that generates high-quality blog content and writing assistance."
            },
            {
              role: "user",
              content: prompt
            }
          ],
          temperature: 0.7,
          max_tokens: 2000,
        }, 
        {
          headers: {
            'Authorization': `Bearer ${ANYSCALE_API_KEY}`,
            'Content-Type': 'application/json'
          },
          timeout: 30000, // 30 second timeout
        }
      );
      
      console.log('Received response from Anyscale API');
      return response.data.choices[0].message.content;
    } catch (axiosError: any) {
      console.error('Axios error details:', {
        message: axiosError.message,
        code: axiosError.code,
        response: axiosError.response?.data || 'No response data',
        status: axiosError.response?.status || 'No status code'
      });
      
      // Check if we have a response with error details
      if (axiosError.response?.data?.error) {
        return `Error from Anyscale API: ${axiosError.response.data.error.message || 'Unknown API error'}`;
      }
      
      // Network or timeout error
      if (axiosError.code === 'ECONNABORTED') {
        return "The request to the AI service timed out. Please try again later.";
      }
      
      if (axiosError.code === 'ERR_NETWORK') {
        return "Network error occurred while connecting to the AI service. Please check your internet connection and try again.";
      }
      
      return "Sorry, there was an issue connecting to the AI service. Please try again later.";
    }
  } catch (error) {
    console.error('Error generating Anyscale response:', error);
    
    // Provide a graceful fallback for errors
    return "I'm sorry, I couldn't generate a response at this time. Please try again later.";
  }
};

/**
 * Rewrites a paragraph using Anyscale API
 * @param text Original paragraph text
 * @param tone Desired tone for rewrite
 * @returns Rewritten paragraph
 */
export const rewriteParagraphWithOllama = async (text: string, tone: string): Promise<string> => {
  const prompt = `Rewrite the following paragraph in a ${tone} tone, maintaining its meaning but using different wording:\n\n"${text}"\n\nRewritten paragraph:`;
  const systemPrompt = "You are an expert content rewriter. Your task is to rewrite text while maintaining the original meaning but improving the quality, readability, and matching the requested tone.";
  return generateOllamaResponse(prompt, systemPrompt);
};

/**
 * Rewrites a sentence using Anyscale API
 * @param text Original sentence text
 * @param tone Desired tone for rewrite
 * @returns Rewritten sentence
 */
export const rewriteSentenceWithOllama = async (text: string, tone: string): Promise<string> => {
  const prompt = `Rewrite the following sentence in a ${tone} tone, maintaining its meaning but using different wording:\n\n"${text}"\n\nRewritten sentence:`;
  const systemPrompt = "You are an expert sentence rewriter. Your task is to rewrite sentences while maintaining the original meaning but improving the quality, readability, and matching the requested tone.";
  return generateOllamaResponse(prompt, systemPrompt);
};

/**
 * Generates blog ideas using Anyscale API
 * @param topic Blog topic
 * @param count Number of ideas to generate
 * @returns List of blog ideas
 */
export const generateBlogIdeasWithOllama = async (topic: string, count: number): Promise<string[]> => {
  const prompt = `Generate ${count} unique and engaging blog post ideas about "${topic}". For each idea, provide a compelling title.`;
  const systemPrompt = "You are a creative content strategist specializing in generating engaging blog post ideas that drive traffic and engagement.";
  const response = await generateOllamaResponse(prompt, systemPrompt);
  
  // Parse the response into a list of blog ideas
  const ideas = response
    .split(/\d+\./)
    .map(item => item.trim())
    .filter(item => item.length > 0);
  
  return ideas.length ? ideas : [`${count} Blog Ideas About ${topic}`];
};
